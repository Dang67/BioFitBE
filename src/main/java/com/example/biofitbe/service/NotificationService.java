package com.example.biofitbe.service;

import com.example.biofitbe.dto.NotificationDTO;
import com.example.biofitbe.dto.NotificationRequest;
import com.example.biofitbe.model.Notification;
import com.example.biofitbe.repository.NotificationRepository;
import com.example.biofitbe.repository.UserRepository;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class NotificationService {

    @Autowired
    private NotificationRepository notificationRepository;

    @Autowired
    private UserRepository userRepository;

    // h√†m ki·ªÉm tra xem th·ªùi gian target
    private LocalDateTime getNextValidTime(int hour, int minute) {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime target = now.with(LocalTime.of(hour, minute));
        if (target.isBefore(now)) {
            target = target.plusDays(1); // ƒê√£ qua -> chuy·ªÉn sang ng√†y mai
        }
        return target;
    }

    private void scheduleBreakfastNotifications(String userId) {
        LocalDateTime today = getNextValidTime(7, 0);
        System.out.println("Scheduled time: " + today);

        // Th√¥ng b√°o ch√≠nh
        Notification notification = Notification.builder()
                .userId(userId)
                .title("ƒê√£ ƒë·∫øn gi·ªù ƒÉn s√°ng r·ªìi! üç≥")
                .message("Ch√†o bu·ªïi s√°ng! H√£y n·∫°p nƒÉng l∆∞·ª£ng cho ng√†y m·ªõi nh√©!")
                .mealType(Notification.MealType.BREAKFAST)
                .scheduledTime(today)
                .createdAt(LocalDateTime.now())
                .isRead(false)
                .priority(0)
                .isReminderSent(false)
                .build();

        notificationRepository.save(notification);

        // Th√¥ng b√°o nh·∫Øc nh·ªü sau 5 ph√∫t
        Notification reminder = Notification.builder()
                .userId(userId)
                .title("Nh·∫Øc nh·ªü ƒÉn s√°ng ü•û")
                .message("ƒê·ª´ng qu√™n ƒÉn s√°ng ƒë·ªÉ c√≥ nƒÉng l∆∞·ª£ng cho bu·ªïi s√°ng nh√©!")
                .mealType(Notification.MealType.BREAKFAST)
                .scheduledTime(today.plusMinutes(5))
                .createdAt(LocalDateTime.now())
                .isRead(false)
                .priority(0)
                .isReminderSent(false)
                .build();

        notificationRepository.save(reminder);
    }

    private void scheduleLunchNotifications(String userId) {
        LocalDateTime today = getNextValidTime(12, 0);
        System.out.println("Scheduled time: " + today);

        // Th√¥ng b√°o ch√≠nh
        Notification notification = Notification.builder()
                .userId(userId)
                .title("ƒê√£ ƒë·∫øn gi·ªù ƒÉn tr∆∞a r·ªìi! üç≤")
                .message("H√£y d√†nh th·ªùi gian ƒë·ªÉ th∆∞·ªüng th·ª©c b·ªØa tr∆∞a dinh d∆∞·ª°ng nh√©!")
                .mealType(Notification.MealType.LUNCH)
                .scheduledTime(today)
                .createdAt(LocalDateTime.now())
                .isRead(false)
                .priority(0)
                .isReminderSent(false)
                .build();

        notificationRepository.save(notification);

        // Th√¥ng b√°o nh·∫Øc nh·ªü sau 10 ph√∫t
        Notification reminder = Notification.builder()
                .userId(userId)
                .title("Nh·∫Øc nh·ªü ƒÉn tr∆∞a ü•ó")
                .message("ƒê·ª´ng b·ªè b·ªØa tr∆∞a! H√£y n·∫°p nƒÉng l∆∞·ª£ng ƒë·ªÉ ho√†n th√†nh t·ªët c√¥ng vi·ªác bu·ªïi chi·ªÅu.")
                .mealType(Notification.MealType.LUNCH)
                .scheduledTime(today.plusMinutes(5))
                .createdAt(LocalDateTime.now())
                .isRead(false)
                .priority(0)
                .isReminderSent(false)
                .build();

        notificationRepository.save(reminder);
    }

    private void scheduleDinnerNotifications(String userId) {
        LocalDateTime today = getNextValidTime(18, 0);
        System.out.println("Scheduled time: " + today);

        // Th√¥ng b√°o ch√≠nh
        Notification notification = Notification.builder()
                .userId(userId)
                .title("ƒê√£ ƒë·∫øn gi·ªù ƒÉn t·ªëi r·ªìi! üçΩÔ∏è")
                .message("H√£y th∆∞·ªüng th·ª©c b·ªØa t·ªëi v√† th∆∞ gi√£n sau m·ªôt ng√†y d√†i nh√©!")
                .mealType(Notification.MealType.DINNER)
                .scheduledTime(today)
                .createdAt(LocalDateTime.now())
                .isRead(false)
                .priority(0)
                .isReminderSent(false)
                .build();

        notificationRepository.save(notification);

        // Th√¥ng b√°o nh·∫Øc nh·ªü sau 10 ph√∫t
        Notification reminder = Notification.builder()
                .userId(userId)
                .title("Nh·∫Øc nh·ªü ƒÉn t·ªëi üçö")
                .message("ƒê·ª´ng qu√™n ƒÉn t·ªëi ƒë·∫ßy ƒë·ªß dinh d∆∞·ª°ng ƒë·ªÉ k·∫øt th√∫c ng√†y m·ªôt c√°ch l√†nh m·∫°nh.")
                .mealType(Notification.MealType.DINNER)
                .scheduledTime(today.plusMinutes(5))
                .createdAt(LocalDateTime.now())
                .isRead(false)
                .priority(0)
                .isReminderSent(false)
                .build();

        notificationRepository.save(reminder);
    }

    private void scheduleSnackNotifications(String userId) {
        LocalDateTime now = LocalDateTime.now();

        // N·∫øu l√† 10h s√°ng - Snack bu·ªïi s√°ng
        if (now.getHour() == 10) {
            LocalDateTime morningSnack = getNextValidTime(10, 0);
            System.out.println("Scheduled morning snack time: " + morningSnack);

            Notification morningSnackNotification = Notification.builder()
                    .userId(userId)
                    .title("Gi·ªù ƒÉn nh·∫π bu·ªïi s√°ng üçé")
                    .message("M·ªôt ch√∫t hoa qu·∫£ ho·∫∑c h·∫°t s·∫Ω gi√∫p b·∫°n duy tr√¨ nƒÉng l∆∞·ª£ng ƒë·∫øn b·ªØa tr∆∞a!")
                    .mealType(Notification.MealType.SNACK)
                    .scheduledTime(morningSnack)
                    .createdAt(LocalDateTime.now())
                    .isRead(false)
                    .priority(0)
                    .isReminderSent(false)
                    .build();

            notificationRepository.save(morningSnackNotification);
        }
        // N·∫øu l√† 14h chi·ªÅu - Snack bu·ªïi chi·ªÅu
        else if (now.getHour() == 14) {
            LocalDateTime afternoonSnack = getNextValidTime(14, 0);
            System.out.println("Scheduled afternoon snack time: " + afternoonSnack);

            Notification afternoonSnackNotification = Notification.builder()
                    .userId(userId)
                    .title("Gi·ªù ƒÉn nh·∫π bu·ªïi chi·ªÅu ü•ú")
                    .message("H√£y n·∫°p ch√∫t nƒÉng l∆∞·ª£ng ƒë·ªÉ ho√†n th√†nh t·ªët c√¥ng vi·ªác cu·ªëi ng√†y!")
                    .mealType(Notification.MealType.SNACK)
                    .scheduledTime(afternoonSnack)
                    .createdAt(LocalDateTime.now())
                    .isRead(false)
                    .priority(0)
                    .isReminderSent(false)
                    .build();

            notificationRepository.save(afternoonSnackNotification);
        }
    }

    private void scheduleSleepNotification(String userId) {
        LocalDateTime today = getNextValidTime(22, 0);
        System.out.println("Scheduled time: " + today);

        // Th√¥ng b√°o ch√≠nh
        Notification notification = Notification.builder()
                .userId(userId)
                .title("ƒê√£ ƒë·∫øn gi·ªù ƒëi ng·ªß r√¥i üò¥")
                .message("ƒêi ng·ªß ƒë·ªÉ mai c√≥ m·ªôt nƒÉng l∆∞·ª£ng d·ªìi d√†o cho ng√†y m·ªõi nh√©!")
                .mealType(Notification.MealType.SLEEP)
                .scheduledTime(today)
                .createdAt(LocalDateTime.now())
                .isRead(false)
                .priority(0)
                .isReminderSent(false)
                .build();

        notificationRepository.save(notification);

        // Th√¥ng b√°o nh·∫Øc nh·ªü sau 5 ph√∫t
        Notification reminder = Notification.builder()
                .userId(userId)
                .title("Nh·∫Øc nh·ªü ƒëi ng·ªß üò¥")
                .message("ƒê·ª´ng qu√™n ƒëi ng·ªß ƒë·ªÉ c√≥ nƒÉng l∆∞·ª£ng cho bu·ªïi s√°ng nh√©!")
                .mealType(Notification.MealType.SLEEP)
                .scheduledTime(today.plusMinutes(5))
                .createdAt(LocalDateTime.now())
                .isRead(false)
                .priority(0)
                .isReminderSent(false)
                .build();

        notificationRepository.save(reminder);
    }

    public List<NotificationDTO> getUserNotifications(String userId) {
        return notificationRepository.findByUserIdOrderByPriorityDescScheduledTimeDesc(userId)
                .stream()
                .map(NotificationDTO::fromEntity)
                .collect(Collectors.toList());
    }

    public void markAsRead(Long notificationId) {
        notificationRepository.findById(notificationId).ifPresent(notification -> {
            notification.setRead(true);
            notificationRepository.save(notification);
        });
    }

    // Th√™m ph∆∞∆°ng th·ª©c x√≥a th√¥ng b√°o
    public void deleteNotification(Long notificationId) {
        notificationRepository.deleteById(notificationId);
    }

    // Th√™m ph∆∞∆°ng th·ª©c t·∫°o th√¥ng b√°o
    public Notification createNotification(NotificationRequest request, String userId) {
        Notification notification = Notification.builder()
                .userId(userId)
                .title(request.getTitle())
                .message(request.getMessage())
                .mealType(Notification.MealType.valueOf(request.getMealType()))
                .scheduledTime(request.getScheduledTime())
                .createdAt(LocalDateTime.now())
                .isRead(request.isRead())
                .isReminderSent(false)
                .build();

        return notificationRepository.save(notification);
    }

    @Scheduled(cron = "0 0 1,7,10,12,14,18,22 * * ?")
    @Transactional
    public void sendScheduledMealNotifications() {
        LocalDateTime now = LocalDateTime.now();
        System.out.println("Running scheduled notifications at " + LocalDateTime.now());

        // L·∫•y t·∫•t c·∫£ user c·∫ßn nh·∫≠n th√¥ng b√°o
        List<Long> allUserIds = userRepository.findAllUserIds();

        allUserIds.forEach(userId -> {
            if (now.getHour() == 7) {
                scheduleBreakfastNotifications(String.valueOf(userId));
            } else if (now.getHour() == 12) {
                scheduleLunchNotifications(String.valueOf(userId));
            } else if (now.getHour() == 18) {
                scheduleDinnerNotifications(String.valueOf(userId));
            } else if (now.getHour() == 10 || now.getHour() == 14) {
                scheduleSnackNotifications(String.valueOf(userId));
            } else if (now.getHour() == 22) {
                scheduleSleepNotification(String.valueOf(userId));
            }   else if (now.getHour() == 1) {
                createWelcomeNotification(String.valueOf(userId));
            }
        });
    }

    public Notification createWelcomeNotification(String userId) {
        LocalDateTime now = LocalDateTime.now();

        Notification notification = Notification.builder()
                .userId(userId)
                .title("Ch√†o m·ª´ng ƒë·∫øn v·ªõi BioFit!")
                .message("C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng ·ª©ng d·ª•ng. H√£y b·∫Øt ƒë·∫ßu h√†nh tr√¨nh s·ª©c kh·ªèe v·ªõi ng√†y m·ªõi c·ªßa b·∫°n!")
                .mealType(Notification.MealType.OTHER)
                .scheduledTime(now)
                .createdAt(now)
                .isRead(false)
                .priority(1)
                .isReminderSent(false)  
                .build();

        return notificationRepository.save(notification);
    }

    @Transactional
    public void markAllAsRead(String userId) {
        notificationRepository.markAllAsReadByUserId(userId);
    }

    @Transactional
    public void deleteAllNotifications(String userId) {
        notificationRepository.deleteByUserId(userId);
    }

}
